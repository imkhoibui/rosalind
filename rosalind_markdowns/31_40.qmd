---
title: 31-40
---

### 31 Partial Permutations
```{python}
import math
def count_partial_perm(n, k)->int:
    """
        This function calculates the total number of partial permutations.
        -----
        Parameters:
        - n (int): number of objects in total
        - k (int): number of objects to draw on
        -----
        Returns:
        - (int): the number of partial permutations
    """
    total = math.factorial(n) / math.factorial(n-k)
    return int(total % 1000000)
```

```{python}
print(count_partial_perm(21, 7))
```


### 32 Enumerating Oriented Gene Orderings

```{python}
def enumerate_oriented_genes(n: int)->str:
    """
        This function returns the total number of signed permutations of length 
        n, followed by a list of all such permutations
        -----
        Parameters:
        - n (int): the length of permutations
        -----
        Returns:
        - (str): the list of permutations with sign
    """
    lst = []
    for i in range(n):
        lst.append(i + 1)
    print("Before enumerating", lst)
    return enumerate_helper(lst, "", n)

def enumerate_helper(lst, seq, k):
    ans = ""
    ## base case, stops when k == 0
    if k == 0:
        return seq + "\n"
    
    for i in range(len(lst)):
        print(lst)
        char = lst.pop(0)
        seq_pos = seq + str(char) + " "
        ans += enumerate_helper(lst, seq_pos, k - 1)
        neg_char = char*-1
        seq_neg = seq + str(neg_char) + " "
        ans += enumerate_helper(lst, seq_neg, k - 1)
        lst.append(char)
    return ans
```

```{python}
print(enumerate_oriented_genes(2))
```

### 33 Counting Subsets

```{python}
def subset_counts(n: int) -> int:
    """
        This function returns the total number of subsets of {1, 2, â€¦, n}
        -----
        Parameters:
        - n (int): the length of original set
        -----
        Returns:
        - (int): number of subsets
    """
    return 2**(n) % 1000000
```

```{python}
print(subset_counts(3))
```


### 34 Error Correction in Reads

```{python}
from utils import point_mutations, DNA_complementary

def error_corrections(seqs)->str:
    """
        This function returns a list of all corrections in the form 
        "[old read]->[new read]". 
        -----
        Parameters:
        - seqs (List): a list of DNA sequences 
        -----
        Returns:
        - (str): the sequences before and after corrected
    """
    seqs_dict = {}
    correct_dict = {}
    incorrect_dict = {}

    for seq in seqs:
        complementary = DNA_complementary(seq)
        if seq in seqs_dict:
            seqs_dict[seq] += 1
        elif complementary in seqs_dict:
            seqs_dict[complementary] += 1
        elif seq not in seqs_dict:
            seqs_dict[seq] = 1

    for seq, value in seqs_dict.items():
        if value >= 2:
            correct_dict[seq] = value
        else:
            incorrect_dict[seq] = value

    ans = ""
    for seq in incorrect_dict.keys():
        for correct_seq in correct_dict.keys():
            if point_mutations(seq, correct_seq) == 1:
                ans += seq + "->" + correct_seq + "\n"
            elif point_mutations(DNA_complementary(seq), correct_seq) == 1:
                ans += seq + "->" + correct_seq + "\n"

    return ans
```

```{python}
with open("../data/rosalind/rosalind_corr.txt", "r") as file:
    text = file.read().split(">")[1:]
    seqs = ["".join(seq.split("\n")[1:])for seq in text]
    print(error_corrections(seqs))
```

### 35 Counting Phylogenetic Ancestors

```{python}
def ancestors_count(n: int) -> int:
    """
        This function returns the number of internal nodes of any unrooted 
        binary tree having n leaves.
        -----
        Parameters
        - n (int): the number of leaves in the binary tree
        -----
        Returns:
        - (int): the number of internal nodes of the tree
    """
    if n >= 4:
        return n // 2 + n % 2
    else:
        return n - 2
```

```{python}
print(ancestors_count(8))
```

### 36 k-Mer Composition

```{python}
from utils import k_mers_enumerate
def k_mer_composition(seq_str)->str:
    """
        This function returns all the 4-mer composition of s.
        -----
        Parameters:
        - seq_str (str): the DNA string
        -----
        Returns:
        - (str): all the 4-mer composition of the string
    """
    k_mers = k_mers_enumerate(["A", "C", "G", "T"], 4)
    k_mers = k_mers.split("\n")[:-1]
    print(k_mers)
    dict = {}
    for i in range(len(seq_str)-3):
        seq = seq_str[i:i+4]
        if seq not in dict:
            dict[seq] = 1
        else:
            dict[seq] += 1
    ans = ""
    for k_mer in k_mers:
        if k_mer in dict:
            ans += str(dict[k_mer]) + " "
        else:
            ans += str(0) + " "
    return ans
```

```{python}
with open("../data/rosalind/rosalind_kmer.txt", "r") as file:
    text = file.read().split("\n")[1:]
    seq = "".join(text)
    print(k_mer_composition(seq))
```

### 37 Speeding Up Motif Finding

```{python}
def speed_up_motif(seq: str)->str:
    """
        This function returns the failure array of a DNA string.
        -----
        Parameters:
        - seq (str): a DNA string
        -----
        Returns:
        - (str): the failure array
    """
    ans = ""

    ## construct 0 array
    arr = []

    for i in range(len(seq)):
        arr.append(0)

    for i in range(1, len(seq)):
        cumm = 0
        for j in range(len(seq)):
            if j + i < len(seq) and seq[j] == seq[j+i]:
                cumm += 1
                if cumm > arr[j+i]:
                    arr[j+i] = cumm
            else:
                break
    
    with open("../data/results/results_motif.txt", "w") as f:
        ans = ""
        for each in arr:
            ans += str(each) + " "
        f.write(ans)
    return ans
```

```{python}
print(speed_up_motif("AAACAAAAAAGCTGATAAAAGATTGCC"))
```

### 38 Finding a Shared Spliced Motif

```{python}
def longest_common_subsequence(seq_1, seq_2)->str:
    """
        This function finds the longest common subsequence of 2 strings.
        -----
        Parameters:
        - seq_1, seq_2 (str): 2 DNA strings
        -----
        Returns:
        - the longest common subsequence
    """
    seq_len_1 = len(seq_1)
    seq_len_2 = len(seq_2)
    
    # Initialize the dp matrix with 0s
    mat = [[0] * (seq_len_2 + 1) for _ in range(seq_len_1 + 1)]
    
    # Fill the dp matrix
    for i in range(1, seq_len_1 + 1):
        for j in range(1, seq_len_2 + 1):
            if seq_1[i - 1] == seq_2[j - 1]:
                mat[i][j] = mat[i - 1][j - 1] + 1
            else:
                mat[i][j] = max(mat[i - 1][j], mat[i][j - 1])
    
    lcs = []
    i, j = seq_len_1, seq_len_2
    while i > 0 and j > 0:
        if seq_1[i - 1] == seq_2[j - 1]:
            lcs.append(seq_1[i - 1])
            i -= 1
            j -= 1
        elif mat[i - 1][j] > mat[i][j - 1]:
            i -= 1
        else:
            j -= 1

    return ''.join(lcs[::-1])
```

```{python}
with open("../data/rosalind/rosalind_lcsq.txt", "r") as file:
    text = file.read().split(">")[1:]
    seq_1 = text[0].split("\n")[1:]
    seq_2 = text[1].split("\n")[1:]
    seq_1 = "".join(seq_1)
    seq_2 = "".join(seq_2)
    print(longest_common_subsequence(seq_1, seq_2))
```

### 39 Ordering Strings of Varying Length Lexicographically

```{python}
from typing import List
def helper(results_str, to_multi):
    """
        This helper function help multiply previous sequences with the original
        to form new permutations of strings (ordered lexicographically)
    """
    new = []
    results_str = [""] + results_str
    for i in range(len(to_multi)):
        for j in range(len(results_str)):
            new.append(to_multi[i] + results_str[j])
    return new

def order_strings_lex(results_str, seq_str: List, k: int)->str:
    """
        This function returns all strings of length at most k formed from seq_str
        -----
        Parameters:
        - results_str (list): the list of currently calculated permutations
        - seq_str (list): the original list of alphabets
        - k (int): the maximum length of strings formed
        -----
        Returns:
        - (str): all strings permutations, ordered

    """
    to_multi = [] + seq_str
    if k == 1:
        return results_str    
    return helper(order_strings_lex(results_str, seq_str, k - 1), to_multi)
```


```{python}
with open("../data/rosalind/rosalind_lexv.txt", "r") as file:
    text = file.read().split("\n")
    li = list(text[0].split(" "))
    num = int(text[1])
    ans = order_strings_lex(li, li, num)

with open("../data/results/results_lexv.txt", "w") as f:
    for each in ans:
        f.write(each)
        f.write("\n")
```


### 40 Maximum Matchings and RNA Secondary Structures

```{python}
def maximum_matching(seq: str)->int:
    """
        This function calculates the total possible number of maximum matchings 
        of basepair edges in the bonding graph seq.
        -----
        Parameters:
        - seq (str): the sequence to form the bonding graph
        -----
        Returns:
        - (int): the number of maximum matchings
    """
    dict = {}
    for char in seq:
        if char not in dict:
            dict[char] = 1
        else:
            dict[char] += 1

    max_AU, min_AU = max(dict["A"], dict["U"]), min(dict["A"], dict["U"])
    max_GC, min_GC = max(dict["G"], dict["C"]), min(dict["G"], dict["C"])

    AU_matching = math.factorial(max_AU) // math.factorial(max_AU-min_AU)
    GC_matching = math.factorial(max_GC) // math.factorial(max_GC-min_GC)
    num_matching = AU_matching*GC_matching
    return num_matching
```

```{python}
with open("../data/rosalind/rosalind_mmch.txt", "r") as file:
    text = file.read().split("\n")[1:]
    seq = "".join(text)
    print(maximum_matching(seq))
```