---
title: 41-50
---

### 41 Creating a Distance Matrix

```{python}
from typing import List
from utils import point_mutations
import numpy as np
def distance_matrix(seqs: List):
    """
        This function creates the matrix corresponding to the p-distance on the 
        given strings.
        -----
        Parameters:
        - seqs (List): a list of sequences
        -----
        Returns:
        - the distance matrix
    """
    seq_length = len(seqs[0])
    distance_matrix = np.zeros((len(seqs), len(seqs)))
    for i, seq_1 in enumerate(seqs):
        for j, seq_2 in enumerate(seqs):
            if i == j:
                distance = 0
                distance_matrix[i][j] = 0.0
            else:
                distance = point_mutations(seq_1, seq_2)
                distance_matrix[i][j] = round(distance/seq_length, 3)
    return distance_matrix
```

```{python}
with open("../data/rosalind/rosalind_pdst.txt", "r") as file:
    text = file.read().split(">")[1:]
    seqs = []
    for seq in text:
        seq = seq.split("\n")[1:]
        seq = "".join(seq)
        seqs.append(seq)
    print(distance_matrix(seqs))
```

### 42 Matching a Spectrum to a Protein

```{python}
from utils import comparing_spectra, get_mass

def spectrum_to_protein(seqs, lst):
    """
        This function calculates the maximum multiplicity and its string
        -----
        Parameters:
        - seqs (List): the list of protein sequences
        - lst (List): the list of protein complete spectrum
        -----
        Returns:
        - max_multi (int): the maximum multiplicity
        - max_seq (int): the sequence corresponding to that maximum 
    """
    mass_dict = get_mass("../data/ref/mass.txt")
    max_multi = -1
    max_seq = ""
    for seq in seqs:
        multiset_lst = []
        for i in range(1, len(seq)):
            pr_sum = 0
            su_sum = 0
            prefix = seq[:i]
            suffix = seq[i:]
            for each in prefix:
                pr_sum += float(mass_dict[each])
            for each in suffix:
                su_sum += float(mass_dict[each])
            multiset_lst.append(round(pr_sum, 3))
            multiset_lst.append(round(su_sum, 3))
        max_value, _ = comparing_spectra(multiset_lst, lst)
        if max_value >= max_multi:
            max_multi = max_value
            max_seq = seq
    return max_multi, max_seq
```

```{python}
with open("../data/rosalind/rosalind_prsm.txt", "r") as file:
    text = file.read().split("\n")[:-1]
    n = int(text[0])
    seq_ls = text[1:n+1]
    lst = text[n+1:]
    print(spectrum_to_protein(seq_ls, lst))
```

### 43 Matching Random Motifs

```{python}
def random_motifs(N: int, x: float, s: str)->float:
    """
        This function computes the probability that at least 1 of N random DNA 
        strings having the same length equals to s
        -----
        Parameters:
        - N (int): the total random DNA strings
        - x (float): the GC-content prob
        - s (str): the string to search for
        -----
        Returns:
        - (float): the probability that at least 1/N string equals s
    """
    P = 1.0
    for char in s:
        if char in 'AT':
            P *= (1 - x)/2
        elif char in 'GC':
            P *= x/2
    prob = 1 - (1 - P)**N
    return prob
```

```{python}
print(random_motifs(82568, 0.539812, "AGCTTGCC"))
```

### 44 Interleaving two Motifs

```{python}
def interleaving_two_motifs(seq_1, seq_2)->str:
    """
        This function computes the shortest common supersequence between 2 strings
        -----
        Parameters:
        - seq_1, seq_2 (str): 2 DNA strings
        -----
        Returns: 
        - (str): the shortest common supersequence
    """
    seq_len_1 = len(seq_1)
    seq_len_2 = len(seq_2)
    scs = []
    mat = [[0] * (seq_len_2 + 1) for _ in range(seq_len_1 + 1)]
    
    for i in range(1, seq_len_1 + 1):
        for j in range(1, seq_len_2 + 1):
            if seq_1[i - 1] == seq_2[j - 1]:
                mat[i][j] = mat[i - 1][j - 1] + 1
            else:
                mat[i][j] = max(mat[i - 1][j], mat[i][j - 1])
    
    i, j = seq_len_1, seq_len_2
    while i > 0 and j > 0:
        if seq_1[i - 1] == seq_2[j - 1]:
            scs.append(seq_1[i - 1])
            i -= 1
            j -= 1
        elif mat[i - 1][j] >= mat[i][j - 1]:
            scs.append(seq_1[i - 1])
            i -= 1
        else:
            scs.append(seq_2[j - 1])
            j -= 1

    while i > 0:
        scs.append(seq_1[i - 1])
        i -= 1
    while j > 0:
        scs.append(seq_2[j - 1])
        j -= 1

    return ''.join(scs[::-1])
```

```{python}
with open("../data/rosalind/rosalind_scsp.txt", "r") as f:
    text = f.read().split("\n")
    print(interleaving_two_motifs(text[0], text[1]))
```

### 45 Introduction to Alternative Splicing

```{python}
def alternative_splicing(n: int, k:int)->int:
    """
        This function uses Pascal's triangle to compute the combination statistics
        -----
        Parameters:
        - n (int): the total objects to take 
        - k (int): the minium objects to draw on
        -----
        Returns:
        - (int): sum of combinations
    """
    pascal_triangle = [[1], [1, 1]]
    sum = 0
    index = 2
    for i in range(2, n + 1):
        row = []
        for j in range(i + 1):
            if j == 0 or j == i:
                row.append(1)
            else:
                row.append(pascal_triangle[index-1][j-1] + pascal_triangle[index-1][j])
        pascal_triangle.append(row)
        if len(pascal_triangle) == 10:
            pascal_triangle = pascal_triangle[1:]
        else:
            index += 1
    result = pascal_triangle[-1]
    for i in range(k, len(result)):
        sum += result[i] 

    return sum % 1000000
```

```{python}
print(alternative_splicing(1649, 1238))
```

### 46 Introduction to Set Operations

```{python}
def set_operations(n: int, set_1, set_2)->str:
    """
        This function returns all set operations between 2 sets
        -----
        Parameters:
        - n (int): maximum of the full sequences {1, ..., n}
        - set_1, set_2 (set): the 2 sets
        -----
        Returns:
        - (str): the results of set operations
    """
    ans = ""
    full_set = set()
    for value in range(int(n)):
        full_set.add(value+1)

    ## Convert the strings to sets
    seq_1 = set_1.strip("{}")
    seq_2 = set_2.strip("{}")
    seq_1 = seq_1.split(",")
    seq_2 = seq_2.split(", ")

    set_1 = {int(element) for element in seq_1}
    set_2 = {int(element) for element in seq_2}

    ans += str(set_1.union(set_2)) + "\n"
    ans += str(set_1.intersection(set_2)) + "\n"
    ans += str(set_1 - set_2) + "\n"
    ans += str(set_2 - set_1) + "\n"
    ans += str(full_set - set_1) + "\n"
    ans += str(full_set - set_2) + "\n"
    
    with open("../data/results/results_seto.txt", "w") as f:
        f.write(ans)
```

```{python}
with open("../data/rosalind/rosalind_seto.txt", "r") as file:
    text = file.read().split("\n")
    n = text[0]
    set_1 = text[1]
    set_2 = text[2]
    set_operations(n, set_1, set_2)
```

### 47 Expected Number of Restriction Sites

```{python}
def expected_restriction(n:int, substr:str, arr)->List:
    """
        This function returns an array represents the expected number of times 
        that s will appear as a substring of a random DNA string.
        -----
        Parameters:
        - n (int): length of random DNA string
        - substr (str): the substring to find
        - arr (array): an array of GC-content probability
        -----
        Returns:
        - (List): a list of expected restriction sites
    """
    str_len = len(substr)
    n_select = n - str_len + 1
    expected = []

    for gc_content in arr:
        GC_prob = gc_content / 2
        AT_prob = 0.5 - GC_prob
        prob = 1.0
        for char in substr:
            if char in "GC":
                prob *= GC_prob
            elif char in "AT":
                prob *= AT_prob
        expected.append(n_select*prob)

    return expected
```

### 48 Inferring Protein from Spectrum

```{python}
from typing import List
from utils import get_mass

def protein_infer(L_list: List)->str:
    """
        This function returns a protein string of length nâˆ’1 whose prefix 
        spectrum is equal to L.
        -----
        Parameters:
        - L_list (List): a list of spectrum
        -----
        Returns:
        - (str) the protein string with prefix spectrum in L
    """
    mass_dict = get_mass("../data/ref/mass.txt")
    protein_str = ""
    for i in range(1, len(L_list)):
        residue = round(float(L_list[i]) - float(L_list[i-1]), 4)
        for key, value in mass_dict.items():
            
            if round(float(value), 4) == residue:
                protein_str += key
                break
    return protein_str
```

```{python}
with open("../data/rosalind/rosalind_spec.txt", "r") as f:
    text = f.read()
    L_list = text.split("\n")[:-1]
    print(protein_infer(L_list))
```

### 49 Comparing Spectra with the Spectral Convolution

```{python}
def comparing_spectra(seq_1: List, seq_2:List):
    """
        This function returns the largest multiplicity and the absolute value of 
        the number maximizing multiplicity.
        -----
        Parameters:
        - seq_1, seq_2 (str): the sequences of positive real numbers
        -----
        Returns:
        - max_value (int): the largest multiplicity 
        - multiplicity (str): the absolute value of the number maximizing multiplicity.
    """
    difference = {}
    for num_1 in seq_1:
        for num_2 in seq_2:
            diff = float(num_1) - float(num_2)
            diff = round(diff, 5)
            if diff not in difference:
                difference[diff] = 1
            else:
                difference[diff] += 1
    multiplicity = max(difference, key=difference.get)
    max_value = difference[multiplicity]
    return max_value, multiplicity
```

```{python}
with open("../data/rosalind/rosalind_conv.txt", "r") as file:
    text = file.read().split("\n")
    seq_1 = [float(num) for num in text[0].split(" ")]
    seq_2 = [float(num) for num in text[1].split(" ")]
    print(comparing_spectra(seq_1, seq_2))
```

### 50 Inferring Peptide from Full Spectrum

```{python}
def peptide_inferrence_spectrum(mass_list: List)->str:
    """
        This function infers peptide from the full spectrum list
        -----
        Parameters:
        - mass_list (List): the list of masses of b-ions and y-ions
        -----
        Returns:
        - (str): the protein string inferred
    """
    mass_dict = get_mass("../data/ref/mass.txt", reverse=True)
    # print(mass_dict)
    pr_string = ""

    ## get the length of protein string
    n = (len(mass_list) - 3) // 2

    ## use mass_dict to infer the string
    i = 1
    while i < len(mass_list) + 1:
        for j in range(i + 1, len(mass_list)):
            diff =  float(mass_list[j]) - float(mass_list[i])
            diff = round(diff, 3)
            if diff in mass_dict:
                i = j - 1
                pr_string += mass_dict[diff]
                break
        if len(pr_string) == n:
            break
        i += 1

    return pr_string
```

```{python}
with open("../data/rosalind/rosalind_full.txt", "r") as file:
    text = file.read().split("\n")
    print(peptide_inferrence_spectrum(text))
```