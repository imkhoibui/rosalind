---
title: 41-50
---

### 41 Creating a Distance Matrix

```{python}
from utils import point_mutations
import numpy as np
def distance_matrix(seqs):
    seq_length = len(seqs[0])
    distance_matrix = np.zeros((len(seqs), len(seqs)))
    for i, seq_1 in enumerate(seqs):
        for j, seq_2 in enumerate(seqs):
            if i == j:
                distance = 0
                distance_matrix[i][j] = 0.0
            else:
                distance = point_mutations(seq_1, seq_2)
                distance_matrix[i][j] = round(distance/seq_length, 3)
    return distance_matrix
```

```{python}
with open("../data/rosalind/rosalind_pdst.txt", "r") as file:
    text = file.read().split(">")[1:]
    seqs = []
    for seq in text:
        seq = seq.split("\n")[1:]
        seq = "".join(seq)
        seqs.append(seq)
    print(distance_matrix(seqs))
```

### 42 Reversal Distance


### 43 Matching Random Motifs

```{python}
def random_motifs(N, x, s):
    P = 1.0
    for char in s:
        if char in 'AT':
            P *= (1 - x)/2
        elif char in 'GC':
            P *= x/2
    prob = 1 - (1 - P)**N
    return prob
```

```{python}
print(random_motifs(82568, 0.539812, "AGCTTGCC"))
```

### 44 Counting Subsets

```{python}
def subset_counts(n: int) -> int:
    return 2**(n) % 1000000
```

### 45 Introduction to Alternative Splicing


### 46 Introduction to Set Operations

```{python}
def set_operations(n, set_1, set_2):
    ans = ""
    full_set = set()
    for value in range(int(n)):
        full_set.add(value+1)

    ## Convert the strings to sets
    seq_1 = set_1.strip("{}")
    seq_2 = set_2.strip("{}")
    seq_1 = seq_1.split(",")
    seq_2 = seq_2.split(", ")

    set_1 = {int(element) for element in seq_1}
    set_2 = {int(element) for element in seq_2}

    ans += str(set_1.union(set_2)) + "\n"
    ans += str(set_1.intersection(set_2)) + "\n"
    ans += str(set_1 - set_2) + "\n"
    ans += str(set_2 - set_1) + "\n"
    ans += str(full_set - set_1) + "\n"
    ans += str(full_set - set_2) + "\n"
    
    with open("../data/results/results_seto.txt", "w") as f:
        f.write(ans)
```


```{python}
with open("../data/rosalind/rosalind_seto.txt", "r") as file:
    text = file.read().split("\n")
    n = text[0]
    set_1 = text[1]
    set_2 = text[2]
    set_operations(n, set_1, set_2)
```

### 47 Expected Number of Restriction Sites

```{python}
def expected_restriction(n, substr, arr):
    str_len = len(substr)
    n_select = n - str_len + 1
    expected = []

    for gc_content in arr:
        GC_prob = gc_content / 2
        AT_prob = 0.5 - GC_prob
        prob = 1.0
        for char in substr:
            if char in "GC":
                prob *= GC_prob
            elif char in "AT":
                prob *= AT_prob
        expected.append(n_select*prob)

    return expected
```


### 48 Motzkin Numbers and RNA Secondary Structures


### 49 Comparing Spectra with the Spectral Convolution

```{python}
def comparing_spectra(seq_1, seq_2):
    difference = {}
    for num_1 in seq_1:
        for num_2 in seq_2:
            diff = float(num_1) - float(num_2)
            diff = round(diff, 5)
            if diff not in difference:
                difference[diff] = 1
            else:
                difference[diff] += 1
    multiplicity = max(difference, key=difference.get)
    max_value = difference[multiplicity]
    return max_value, multiplicity
```

```{python}
with open("../data/rosalind/rosalind_conv.txt", "r") as file:
    text = file.read().split("\n")
    seq_1 = [float(num) for num in text[0].split(" ")]
    seq_2 = [float(num) for num in text[1].split(" ")]
    print(comparing_spectra(seq_1, seq_2))
```

### 50 Inferring Protein from Spectrum

```{python}
from typing import List
from utils import get_mass

def protein_infer(L_list: List):
    mass_dict = get_mass("../data/ref/mass.txt")
    protein_str = ""
    for i in range(1, len(L_list)):
        residue = round(float(L_list[i]) - float(L_list[i-1]), 4)
        for key, value in mass_dict.items():
            
            if round(float(value), 4) == residue:
                protein_str += key
                break
    return protein_str

```

```{python}
with open("../data/rosalind/rosalind_spec.txt", "r") as f:
    text = f.read()
    L_list = text.split("\n")[:-1]
    print(protein_infer(L_list))
```
