---
title: "Insertion sorting"

jupyter: python3
---

I remember in my Computer Science II course, I got to learn about various
sorting algorithms (merge sort, quicksort, selection sort...), each with its own
time & space complexity.

Here I implement sorting algorithm using insertion sort.

Basically, the approach is that I'll iterate through all the elements in the list,
and for each element, I'll compare with the ones before it until I reach a point
where the current element is bigger than the previous.

```{python}
from typing import List

def insertion_sort(ls: List) -> List:
    """
        This function implements insertion sort.
        -----
        Parameters:
        - ls (list): a list of unordered ints
        -----
        Returns:
        - (list): the ascending ordered list
    """
    new_ls = [ls[0]]
    for i in range(1, len(ls)):
        pivot = ls[i]
        if pivot >= new_ls[-1]:
            new_ls.append(pivot)
        else:
            for j in range(len(new_ls) -1, -1, -1):
                if pivot >= new_ls[j]:
                    new_ls.insert(j+1, pivot)
                    break
                elif j == 0:
                    new_ls.insert(0, pivot)
                elif pivot < new_ls[j]:
                    continue
    return new_ls
```

Test case of me trying on a random list of 10 positive ints:

```{python test_case}
a_list = [55, 17, 23, 1, 35, 89, 43, 4, 22, 11]
print(insertion_sort(a_list))
```

**Note**

Time complexity:

- Worst case: O(n^2^)

- Best case: O(n) (all elements are bigger so we only need to append to the lst)

Space complexity: 

O(1) -> because the algorithm is in-place sorting, we need
not extra memory